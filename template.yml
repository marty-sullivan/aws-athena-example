AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Resources for Athena/Lambda Example by Marty J. Sullivan'

Parameters:

  NdfdElement:
    Description: 'The NDFD weather element to retrieve (e.g. temp, mint, maxt, sky)'
    Type: 'String'
    Default: 'temp'

  CenterLatitude:
    Description: 'The Latitude of the center point of the forecast; Default is Cornell University'
    Type: 'Number'
    Default: 42.4534
    MaxValue: 52.8077
    MinValue: 20.1920
    
  CenterLongitude:
    Description: 'The Latitude of the center point of the forecast; Default is Cornell University'
    Type: 'Number'
    Default: -76.4735
    MaxValue: -60.8856
    MinValue: -130.1034
  
  TimeZone:
    Description: 'The Timezone you would like for displayed times (must be valid TZ database name)'
    Type: 'String'
    Default: 'America/New_York'
  
  CornellEasBucket:
    Description: 'The S3 bucket containing the Cornell EAS Convience Datasets'
    Type: 'String'
    Default: 'cornell-eas'

Globals:
  
  Function:
    Handler: 'entry.lambda_handler'
    MemorySize: 2048
    Runtime: 'python3.7'
    Timeout: 900
    Environment:
      Variables:
        CENTER_LATITUDE: !Sub '${CenterLatitude}'
        CENTER_LONGITUDE: !Sub '${CenterLongitude}'
        NDFD_ELEMENT: !Sub '${NdfdElement}'
        NDFD_DATABASE: !Sub '${CornellEasStack.Outputs.NdfdDatabase}'
        COORDINATES_TABLE: !Sub '${CornellEasStack.Outputs.NdfdCoordinatesTable}'
        ELEMENTS_TABLE: !Sub '${CornellEasStack.Outputs.NdfdElementsTable}'
        LATEST_TABLE: !Sub '${CornellEasStack.Outputs.NdfdLatestTable}'
        OUTPUT_BUCKET: !Sub '${OutputBucket}'
        TIMEZONE: !Sub '${TimeZone}'

Resources:
  
  OutputBucket:
    Type: 'AWS::S3::Bucket'
  
  AthenaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './lambda'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'athena:*Query*'
                - 'glue:Get*'
              Resource:
                - '*'
            - Effect: 'Allow'
              Action: 
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:ListMultipartUploadParts'
                - 's3:AbortMultipartUpload'
                - 's3:PutObject'
                - 's3:PutObjectAcl'
              Resource:
                - !Sub '${OutputBucket.Arn}'
                - !Sub '${OutputBucket.Arn}/*'
          
  AthenaMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - !Sub 'states.${AWS::URLSuffix}'
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${AWS::AccountId}'
      Policies:
        - PolicyName: 'invoke-functions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub '${AthenaFunction.Arn}'

  AthenaMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !Sub '${AthenaMachineRole.Arn}'
      DefinitionString: !Sub |-
        {
          "Comment": "State Machine for Athena Lambda Example by Marty J. Sullivan",
          "StartAt": "ExecuteAthenaQuery",
          "States": {
            "ExecuteAthenaQuery": {
              "Type": "Task",
              "Resource": "${AthenaFunction.Arn}",
              "Next": "WaitForAthenaQuery"
            },
            "WaitForAthenaQuery": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "PlotMap"
            },
            "PlotMap": {
              "Type": "Task",
              "Resource": "${AthenaFunction.Arn}",
              "End": true
            }
          }
        }
  
  CornellEasStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${CornellEasBucket}/datasets/master/ndfd/metadata/template.yml'
      Parameters:
        CornellEasBucket: !Sub '${CornellEasBucket}'
        Environment: 'master'
        DatabaseName: 'cornell_eas_example'
        
